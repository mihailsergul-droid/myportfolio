const { createApp } = Vue;

createApp({
    data() {
        return {
            isLoggedIn: false,
            currentView: 'dashboard',
            currentUser: null,
            loginForm: {
                email: '',
                password: ''
            },
            
            // Demo users
            users: {
                'student@lms.com': {
                    password: 'student123',
                    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
                    role: '–°—Ç—É–¥–µ–Ω—Ç',
                    id: 1
                },
                'instructor@lms.com': {
                    password: 'instructor123',
                    name: '–î—Ä. –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
                    role: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                    id: 2
                }
            },
            
            // Course data
            courses: [
                {
                    id: 1,
                    title: '–û—Å–Ω–æ–≤—ã JavaScript',
                    description: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ JavaScript',
                    progress: 75,
                    lessons: [
                        {
                            id: 1,
                            title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript',
                            videoUrl: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
                            duration: 600
                        }
                    ]
                },
                {
                    id: 2,
                    title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ React',
                    description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å React',
                    progress: 45,
                    lessons: [
                        {
                            id: 2,
                            title: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã React',
                            videoUrl: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4',
                            duration: 720
                        }
                    ]
                },
                {
                    id: 3,
                    title: 'Backend –Ω–∞ Node.js',
                    description: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å Node.js',
                    progress: 20,
                    lessons: [
                        {
                            id: 3,
                            title: '–û—Å–Ω–æ–≤—ã Express.js',
                            videoUrl: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4',
                            duration: 540
                        }
                    ]
                }
            ],
            
            // Quiz data
            quizzes: {
                1: {
                    title: '–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º JavaScript',
                    questions: [
                        {
                            question: '–ö–∞–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ JavaScript?',
                            answers: [
                                { text: 'var myVar = 5;', correct: true },
                                { text: 'variable myVar = 5;', correct: false },
                                { text: 'v myVar = 5;', correct: false },
                                { text: 'declare myVar = 5;', correct: false }
                            ],
                            explanation: '–í JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ var, let –∏–ª–∏ const.'
                        },
                        {
                            question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞?',
                            answers: [
                                { text: 'append()', correct: false },
                                { text: 'push()', correct: true },
                                { text: 'add()', correct: false },
                                { text: 'insert()', correct: false }
                            ],
                            explanation: '–ú–µ—Ç–æ–¥ push() –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.'
                        }
                    ]
                }
            },
            
            // Current states
            selectedCourse: null,
            currentLesson: null,
            currentQuiz: null,
            currentQuestionIndex: 0,
            selectedAnswer: null,
            showResults: false,
            quizCompleted: false,
            quizStarted: false,
            correctAnswers: 0,
            lessonProgress: 0,
            bookmarks: [],
            
            // User stats
            userStats: {
                coursesEnrolled: 3,
                lessonsCompleted: 12,
                certificatesEarned: 2,
                studyHours: 45
            },
            
            recentActivity: [
                { id: 1, action: '–ó–∞–≤–µ—Ä—à–∏–ª —É—Ä–æ–∫', course: '–û—Å–Ω–æ–≤—ã JavaScript', time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥' },
                { id: 2, action: '–ù–∞—á–∞–ª —Ç–µ—Å—Ç', course: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ React', time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' },
                { id: 3, action: '–ü–æ–ª—É—á–∏–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', course: 'HTML –∏ CSS', time: '3 –¥–Ω—è –Ω–∞–∑–∞–¥' }
            ],
            
            achievements: [
                { id: 1, icon: 'üèÜ', title: '–ü–µ—Ä–≤—ã–π –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω' },
                { id: 2, icon: 'üî•', title: '7-–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è' },
                { id: 3, icon: '‚≠ê', title: '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Å—Ç–æ–≤' }
            ],
            
            certificates: [
                {
                    id: 'CERT-001',
                    courseName: '–û—Å–Ω–æ–≤—ã JavaScript',
                    completedDate: '15.01.2024',
                    score: 95
                },
                {
                    id: 'CERT-002',
                    courseName: '–û—Å–Ω–æ–≤—ã HTML –∏ CSS',
                    completedDate: '10.01.2024',
                    score: 88
                }
            ],
            
            // New features data
            upcomingWebinars: [
                {
                    id: 1,
                    title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ Vue.js 3',
                    instructor: '–î—Ä. –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
                    date: '25.01.2024',
                    time: '14:00',
                    zoomLink: 'https://zoom.us/j/123456789'
                },
                {
                    id: 2,
                    title: '–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ React',
                    instructor: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤',
                    date: '27.01.2024',
                    time: '16:00',
                    zoomLink: 'https://zoom.us/j/987654321'
                }
            ],
            
            weeklyAssignments: [
                {
                    id: 1,
                    title: '–ü—Ä–æ–µ–∫—Ç: –¢–æ-–¥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    course: '–û—Å–Ω–æ–≤—ã JavaScript',
                    dueDate: '–î–æ 26.01',
                    urgent: true
                },
                {
                    id: 2,
                    title: '–¢–µ—Å—Ç –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º',
                    course: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ React',
                    dueDate: '–î–æ 30.01',
                    urgent: false
                }
            ],
            
            forumTopics: [
                {
                    id: 1,
                    title: '–ö–∞–∫ –ª—É—á—à–µ –∏–∑—É—á–∞—Ç—å JavaScript?',
                    author: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
                    date: '20.01.2024',
                    replies: 15,
                    views: 234
                },
                {
                    id: 2,
                    title: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º',
                    author: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞',
                    date: '22.01.2024',
                    replies: 8,
                    views: 156
                },
                {
                    id: 3,
                    title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ React —Ö—É–∫–∞–º',
                    author: '–î–º–∏—Ç—Ä–∏–π –ü–µ—Ç—Ä–æ–≤',
                    date: '23.01.2024',
                    replies: 12,
                    views: 189
                }
            ],
            
            libraryResources: [
                {
                    id: 1,
                    title: 'JavaScript: –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                    type: 'PDF –∫–Ω–∏–≥–∞',
                    author: '–î—ç–≤–∏–¥ –§–ª–∞–Ω–∞–≥–∞–Ω',
                    description: '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ JavaScript –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤',
                    icon: 'üìö',
                    category: 'javascript'
                },
                {
                    id: 2,
                    title: 'React –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
                    type: '–í–∏–¥–µ–æ –∫—É—Ä—Å',
                    author: '–ú–∞–∫—Å –®–≤–∞—Ä—Ü–º—é–ª–ª–µ—Ä',
                    description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ React',
                    icon: 'üé•',
                    category: 'react'
                },
                {
                    id: 3,
                    title: 'Node.js –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
                    type: '–°—Ç–∞—Ç—å—è',
                    author: '–ê–Ω–¥—Ä–µ–π –ö–æ–≤–∞–ª–µ–≤',
                    description: '–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–∫–∞–ª–∏—Ä—É–µ–º—ã—Ö Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
                    icon: 'üìù',
                    category: 'nodejs'
                },
                {
                    id: 4,
                    title: 'CSS Grid –∏ Flexbox —à–ø–∞—Ä–≥–∞–ª–∫–∞',
                    type: '–®–ø–∞—Ä–≥–∞–ª–∫–∞',
                    author: 'CSS-Tricks',
                    description: '–ü–æ–ª–Ω–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º CSS –ª–∞–π–∞—É—Ç–∞–º',
                    icon: 'üìã',
                    category: 'css'
                }
            ],
            
            notifications: [
                {
                    id: 1,
                    title: '–ù–æ–≤—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω',
                    message: '–£—Ä–æ–∫ "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ JavaScript" —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω',
                    time: '10 –º–∏–Ω –Ω–∞–∑–∞–¥',
                    read: false
                },
                {
                    id: 2,
                    title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ',
                    message: '–í–µ–±–∏–Ω–∞—Ä "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Vue.js 3" –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞',
                    time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
                    read: false
                },
                {
                    id: 3,
                    title: '–û—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç',
                    message: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 95% –∑–∞ —Ç–µ—Å—Ç –ø–æ JavaScript',
                    time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥',
                    read: true
                }
            ],
            
            // UI states
            showNotifications: false,
            newTopicTitle: '',
            librarySearch: '',
            
            // Admin panel data
            adminTab: 'courses',
            adminStats: {
                totalStudents: 156,
                activeCourses: 12,
                completionRate: 78,
                avgScore: 85
            },
            
            newCourse: {
                title: '',
                description: ''
            },
            
            studentsList: [
                {
                    id: 1,
                    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
                    enrolledCourses: 3,
                    overallProgress: 75,
                    lastActivity: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
                },
                {
                    id: 2,
                    name: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞',
                    enrolledCourses: 2,
                    overallProgress: 92,
                    lastActivity: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥'
                }
            ],
            
            topStudents: [
                { id: 2, name: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞', overallProgress: 92, rank: 1 },
                { id: 1, name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤', overallProgress: 75, rank: 2 }
            ],
            
            adminSettings: {
                emailNotifications: true,
                pushNotifications: false,
                weeklyReports: true
            },
            filteredLibraryResources: []
        }
    },
    
    computed: {
        currentQuestion() {
            if (!this.currentQuiz) return null;
            return this.currentQuiz.questions[this.currentQuestionIndex];
        },
        
        isLastQuestion() {
            if (!this.currentQuiz) return false;
            return this.currentQuestionIndex === this.currentQuiz.questions.length - 1;
        },
        
        quizScore() {
            if (!this.currentQuiz) return 0;
            return Math.round((this.correctAnswers / this.currentQuiz.questions.length) * 100);
        },
        
        overallProgress() {
            const total = this.courses.reduce((sum, course) => sum + course.progress, 0);
            return Math.round(total / this.courses.length);
        },
        
        learningStreak() {
            return 12;
        },
        
        unreadNotifications() {
            return this.notifications.filter(n => !n.read).length;
        },
        
        filteredLibraryResources() {
            if (!this.librarySearch) {
                return this.libraryResources;
            }
            return this.libraryResources.filter(resource => 
                resource.title.toLowerCase().includes(this.librarySearch.toLowerCase()) ||
                resource.description.toLowerCase().includes(this.librarySearch.toLowerCase()) ||
                resource.category.toLowerCase().includes(this.librarySearch.toLowerCase())
            );
        }
    },
    
    methods: {
        quickLogin(type) {
            if (type === 'student') {
                this.loginForm.email = 'student@lms.com';
                this.loginForm.password = 'student123';
            } else {
                this.loginForm.email = 'instructor@lms.com';
                this.loginForm.password = 'instructor123';
            }
            this.login();
        },
        
        login() {
            const user = this.users[this.loginForm.email];
            if (user && user.password === this.loginForm.password) {
                this.currentUser = user;
                this.isLoggedIn = true;
                this.currentView = 'dashboard';
            } else {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
            }
        },
        
        logout() {
            this.isLoggedIn = false;
            this.currentUser = null;
            this.loginForm = { email: '', password: '' };
        },
        
        openCourse(course) {
            this.selectedCourse = course;
            this.currentLesson = course.lessons[0];
            this.currentView = 'course-content';
            this.loadBookmarks();
        },
        
        updateProgress(event) {
            const video = event.target;
            if (video.duration > 0) {
                this.lessonProgress = (video.currentTime / video.duration) * 100;
            }
        },
        
        markLessonComplete() {
            this.lessonProgress = 100;
            if (this.selectedCourse) {
                this.selectedCourse.progress = Math.min(this.selectedCourse.progress + 10, 100);
            }
        },
        
        changeSpeed(event) {
            const video = document.querySelector('.video-player');
            if (video) {
                video.playbackRate = parseFloat(event.target.value);
            }
        },
        
        addBookmark() {
            const video = document.querySelector('.video-player');
            if (video) {
                const currentTime = video.currentTime;
                const note = prompt('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞–∫–ª–∞–¥–∫–µ:') || '–ó–∞–∫–ª–∞–¥–∫–∞';
                
                this.bookmarks.push({
                    id: Date.now(),
                    time: currentTime,
                    note: note
                });
                
                this.saveBookmarks();
            }
        },
        
        removeBookmark(bookmark) {
            this.bookmarks = this.bookmarks.filter(b => b.id !== bookmark.id);
            this.saveBookmarks();
        },
        
        seekTo(time) {
            const video = document.querySelector('.video-player');
            if (video) {
                video.currentTime = time;
            }
        },
        
        formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        },
        
        loadBookmarks() {
            const saved = localStorage.getItem(`bookmarks_${this.currentLesson?.id}`);
            this.bookmarks = saved ? JSON.parse(saved) : [];
        },
        
        saveBookmarks() {
            if (this.currentLesson) {
                localStorage.setItem(`bookmarks_${this.currentLesson.id}`, JSON.stringify(this.bookmarks));
            }
        },
        
        startQuiz() {
            this.currentQuiz = this.quizzes[this.selectedCourse.id];
            if (this.currentQuiz) {
                this.currentView = 'quiz';
                this.quizStarted = true;
                this.currentQuestionIndex = 0;
                this.selectedAnswer = null;
                this.showResults = false;
                this.quizCompleted = false;
                this.correctAnswers = 0;
            }
        },
        
        selectAnswer(index) {
            if (!this.showResults) {
                this.selectedAnswer = index;
            }
        },
        
        submitAnswer() {
            if (this.selectedAnswer !== null) {
                const isCorrect = this.currentQuestion.answers[this.selectedAnswer].correct;
                if (isCorrect) {
                    this.correctAnswers++;
                }
                this.showResults = true;
            }
        },
        
        nextQuestion() {
            this.currentQuestionIndex++;
            this.selectedAnswer = null;
            this.showResults = false;
        },
        
        finishQuiz() {
            this.quizCompleted = true;
            
            // Generate certificate if score is high enough
            if (this.quizScore >= 70) {
                const newCert = {
                    id: `CERT-${Date.now()}`,
                    courseName: this.selectedCourse.title,
                    completedDate: new Date().toISOString().split('T')[0],
                    score: this.quizScore
                };
                this.certificates.push(newCert);
                this.userStats.certificatesEarned++;
            }
        },
        
        closeQuiz() {
            this.currentView = 'course-content';
            this.currentQuiz = null;
            this.quizStarted = false;
        },
        
        downloadCertificate(certificate) {
            const link = document.createElement('a');
            link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(
                `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏\n\n` +
                `–ö—É—Ä—Å: ${certificate.courseName}\n` +
                `–°—Ç—É–¥–µ–Ω—Ç: ${this.currentUser.name}\n` +
                `–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${certificate.completedDate}\n` +
                `–û—Ü–µ–Ω–∫–∞: ${certificate.score}%\n` +
                `ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificate.id}`
            );
            link.download = `certificate-${certificate.id}.txt`;
            link.click();
        },
        
        joinWebinar(webinar) {
            window.open(webinar.zoomLink, '_blank');
            alert(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–±–∏–Ω–∞—Ä—É: ${webinar.title}`);
        },
        
        createTopic() {
            if (this.newTopicTitle.trim()) {
                const newTopic = {
                    id: Date.now(),
                    title: this.newTopicTitle,
                    author: this.currentUser.name,
                    date: new Date().toLocaleDateString('ru-RU'),
                    replies: 0,
                    views: 1
                };
                this.forumTopics.unshift(newTopic);
                this.newTopicTitle = '';
                alert('–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            }
        },
        
        openTopic(topic) {
            topic.views++;
            alert(`–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã: ${topic.title}`);
        },
        
        downloadResource(resource) {
            alert(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${resource.title}`);
        },
        
        viewResource(resource) {
            alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä: ${resource.title}`);
        },
        
        createCourse() {
            if (this.newCourse.title && this.newCourse.description) {
                const course = {
                    id: Date.now(),
                    title: this.newCourse.title,
                    description: this.newCourse.description,
                    progress: 0,
                    lessons: []
                };
                this.courses.push(course);
                this.newCourse = { title: '', description: '' };
                alert('–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            }
        },
        
        editCourse(course) {
            const newTitle = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', course.title);
            if (newTitle) {
                course.title = newTitle;
                alert('–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
            }
        },
        
        deleteCourse(course) {
            if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å "${course.title}"?`)) {
                const index = this.courses.findIndex(c => c.id === course.id);
                this.courses.splice(index, 1);
                alert('–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω!');
            }
        },
        
        getEnrolledCount(courseId) {
            return Math.floor(Math.random() * 50) + 10;
        },
        
        viewStudentDetails(student) {
            alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞: ${student.name}`);
        },
        
        saveSettings() {
            alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        },
        
        exportStudentData() {
            const data = JSON.stringify(this.studentsList, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'students-data.json';
            link.click();
        },
        
        exportCourseData() {
            const data = JSON.stringify(this.courses, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'courses-data.json';
            link.click();
        },
        
        exportAnalytics() {
            const analytics = {
                adminStats: this.adminStats,
                topStudents: this.topStudents
            };
            const data = JSON.stringify(analytics, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'analytics-data.json';
            link.click();
        }
    },
    
    mounted() {
        // Auto-login for demo
        setTimeout(() => {
            if (!this.isLoggedIn) {
                this.quickLogin('student');
            }
        }, 1000);
    }
}).mount('#app');